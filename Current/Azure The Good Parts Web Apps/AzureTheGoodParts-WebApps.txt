Azure: The Good Parts - WebApps

* Introduction
	* Who am I
		Richard Tasker, .Net dev for the past 7yrs. But started out in Robotics and AI. 
		For the past 9mths I have been working for a local start-up, who are looking to revolutionise social media.
		The backend for our app is an ASP.Net Web API hosted on Azure.
	* What am I talking about & who is this talk for
		talking about Azure	WebApps and the supporting services and technologies. 
		I have designed this talk for developers and IT professionals new to cloud computing.
		I will be providing an overview of the different features, how to setup and configure the features, plus a demo.
	* Assumptions
		Basic HTTP and C# knowledge.
		The Azure SDK and Visual Studio installed I'll be using 2013.
		An Azure subscription I will show you how to sign up shortly.
		Azure is a very large platform even with the subset of feature I will be talking about I cannot give detailed explanations of the features
		I wont be talking about any of the IaaS services or any of the BI tools that Azure provide. For these service I have separate presentations.
		Finally I wont be talking about billing, but MS do provide a simple cost calculator -> LINK.
* What is Azure
	Microsoft Azure is a cloud computing service provided by, the clue is in its name, Microsoft. But before I go into any detail lets try and answer 
	the question "Why go to the cloud, why not use On-Premises servers?" 
	* On-Premises Data Centres
		With On-Premises Data Centres, you have the luxury of purchasing exactly the hardware and software you require to run your applications. 
		You also get the enjoyment of jumping out of bed on Patch Tuesday say "yay, I'm gonna patch some servers today!". No? What I'm trying to say is now 
		you have setup and maintenance costs to deal with. 
		
		So you have released you app and you are getting a steady rate of traffic. What happens when you have periods of high load? Are you constrained buy 
		the amount of hardware you have bought? Or are you able to deal with the load? If you can handel the load great! but what is that hardware doing in 
		periods of low activity. The point here is that you are either going to buy too much or too little hardware.
		
		As the popularity of your application increases you are going to have to buy bigger, better hardware. This is the scale up model.
		
	* Cloud Computing
		Cloud Computing comes in 3 forms,
			* SaaS - Software-as-a-Service, were a company provides access to software over the internet. Such as GMail.
			* PaaS - Platform-as-a-Service, provides a platform and environment to allow developers to build applications and services over the internet.
				For example hosting a website.
			* IaaS - Infrastructure-as-a-Service, gives you physical computing resourse in a virtualised environment, such as a VM.
		The chances are most of you will have used at least one form of cloud comptuing today. That is one of the selling points of cloud computing, being able to 
		provide universal access to computing power for your employees and customers.

		The first think you will notice when choosing cloud computing is the reduction in cost, no more expenive licence fee. No more requisition and maintenance costs.
		Venders will also provide a range of services which will keep your costs down as well.
		A common scenario is to use load balencers and auto scaling to provision just enough hardware to cope with the current load. So you only pay for what you use.
		
	* Azure
		Currently Azure is available across the world in 17 data-centres, Azure is also available in 2 additional data-centres in China via a 3rd party provider (21vianet).
		In having so many data-centres in different regions across the globe Azure gives you the ability to deploy your app globally or close to your customers if they are 
		only in a small region. If your app stores sensitive data that cannot be saved outside of the country then you can deploy to data-centres within your country. 
		Eg the Canadian Health Service use Azure but they don't store anything outside of Canada.
		
	* Azure Services
		Compute services 
			This includes the Microsoft Azure Cloud Services (web and worker roles), Azure Websites, and Azure Mobile Services.
		Data services 
			This includes Microsoft Azure Storage (comprised of the Blob, Queue, Table, and Azure Files services), Azure SQL Database, 
			and the Redis Cache.
		Application services 
			This includes services that you can use to help build and operate your applications, such as the Azure Active Directory, 
			Service Bus for connecting distributed systems, HDInsight for processing big data, the Azure Scheduler, and Azure Media Services.
		Network services 
			This includes Azure features such as Virtual Networks, the Azure Content Delivery Network, and the Azure Traffic Manager.
	* Azure Portals
		All of these services can be managed through the Azure Portal. Currently there are two version of the portal.
		* manage.azure.com
			The Management Portal, this is the main production environment.
		* portal.azure.com
			The preview portal, this is MS's new interface to Azure. Not all features of the Management Portal have been migrated across yet and some new 
			feature are only available in the Preview Portal. I will mainly be using the Preview Portal. Only when a feature is not available in 
			the Preview Portal will I switch back to the Management Portal.
	* Navigating the Portal
		Down the left we have the navigation bar and on the right the main storyboard area.
		* HOME - this is where we are now, clicking this get you back to this screen.
		* BROWSE ALL - Here you can see existing services or add a new service.
		* NOTIFICATIONS - When you create a new VM for example it will take a few for the server to be provisioned. Here is where Azure will let you know when 
		you VM is ready to use or if there are any other information you need to know such as outages or any failures.
		* ACTIVE - The windows that appear when you navigate around the portal are call Blades and a collection of them are called Journeys. Here you can 
		switch between or close any active Journeys.
		* BILLING - Here you can find out what subscription you are on and how much money you have spent so far. As you can see I'm on the Pay-As-You-Go subscription 
		and I have spent Â£###.			
* WebApps
	* What is Azure WebApps
		The Azure WebApps service is a managed cloud service, this means you get a VM which you cannot remote onto and you don't have to worry about software upgrades or server patches. 
		THis service allows you to deploy a web application in a variety of languages in a very short amount of time.
		The Azure team provide WebApp SDKs for,
			* .Net
			* Java
			* Node
			* PHP
			* Python
			* and more.
		
		In addition to building and deploying your own application, if you know you will be building an E-Commerce system or hosting a blog/CMS, the Azure team provide 
		a number of templates and framework in the Azure Marketplace.
				 
	* Creating and Deploying a WebApp
		Shall we deploy a Web app to Azure and have a play. Whos has got a stop watch? I want you to time me. 
		* Create a WebApp via the Portal
		* Create a new ASP.Net app in VS
		* Deploy the app from VS
		Now we have a WebApp we now can look at some of the portal features available to us.
	* Settings
		I am not going to go through all of the settings, why? because is will be really boring and secondly I don't have time.	But I will show the really useful ones.
		* Application Settings
			In the Application Settings blade we can see some settings for .Net, PHP, Java, etc versions amongst other settings.
			* Always on
				Is great for stopping IIS powering down your app when it has been inactive for a while. It will regularly ping you app to keep it in a 
				primed state.
			* Remote Debugging
				This has been really helpful for me in the past when I have had bugs that aren't reproducible locally. As long as you have the same version of the code locally
				you can enable remote debugging and debug the code locally. But it can be quite slow.
			* App Settings and Connection Strings
				When you deploy your app, Azure will override the connection strings and app settings you have in your web.config. This is really useful if you don't want 
				the password to your production database in a config transform for everyone to see.
		* Domain names and SSL
			It is quite simple to setup a custom domain name and add SSL certificates in Azure.
		* Scaling - Azure provides 3 scaling options,
			* Manual
				Here you can simply select how many instances of your app you want running at once.
			* CPU Percentage
				This the basic version of Auto Scale, the 1st step is to choose the min / max number of instances you want to scale to.
				Then select the average CPU load across all active instances. If the average CPU load goes above the upper limit it will spin up a new instance 
				of the app. ANd on the lower limit of the threshold it will shutdown an instance.
			* Schedule and Performance Rules
				This is the advanced version of the autoscale service.
				Before you can start adding rules, you need to add a profile.
				A Profile tells Azure when to run the attached set of rules, and there are three options, Always, Recurrence and Fixed Date.
				Lets look at the last two first.
				* Recurrence
					Lets say you have an app that only gets high load during business hours (Mon-Fri, 08:00 - 18:00). You can setup autoscale rules to handle that
					load here. For example you can say from,
						* 08:00 Monday to Friday, when the CPU load is above 65% add a new instance.
							And when the CPU load is below 50% decrease the instances by 1.
						* 18:00 Monday to Friday, when the CPU load is above 85% add a new instance.
							And when the CPU load is below 70% decrease the instances by 1.
				* Fixed Date
					This option is great if you know you are going to get high load in a set period, for example your company maybe releasing the latest version
					of their highly successful online game and they know based on previous releases that the servers were hammered for the first week.
				* Always
					This option is for when your app has high load times that are irregular and unpredictable, for example. You may have a stock trading site 
					that already has high volumes for traffic around the clock, but when news of a certain country has missed their payment deadline, again.
					People who have shares in Greek companies may want to sell them asap.
	* Any WebApp Questions
* Azure SQL
	If you have an on premise server with a vanilla install of the latest version of Windows Server, how long will it take to provision a SQL Server install?
	
	Lets create one now! I don't need you to time me this time. 
	+New -> Data + Storage -> SQL Database. Give the database a name (leedssharp), we also need a server to attach the database too.
	If you already have a server created you can select it here or create a new one. 
	We will have to create a new one. 
		* Lets give the server a name (ritasker), this has to be unique as it will become part of the URL you will use to connect to the server.
		* Add an admin account
		* Then select the data centre we want to use.
		* Next you can either setup a blank db or use the Adventure Works sample db, or if you had a backup you could restore from the backup.
		* We are almost done, we just need to select the pricing plan for the database. There are a few to choose from, differing in features, storage size and DTUs.
			A DTU or Database Throughput Unit, is a value that represents how much CPU, memory, etc resource that database can have. Each server has a max of 2000 
			DTUs which you can spend in any combination of pricing tiers. For example if you only selected the P3 tier you could only have 2 DBs, but if you only 
			selected the S1 tier you could have 200 DBs.
		* Finally we have to allocate the server to a resource group.
	
	While that is being setup it will talk a bit more about the Azure SQL Service. 
	What Azure is doing here is basically setting up a Database-as-a-Service. They are	giving you a SQL Database in the cloud, which takes away all the maintenance and licensing costs. 
	And all that time spent setting up a SQL server has gone.
	
	Azure SQL provides some great features such as,
		* Elastic Scale - If you business is doing well you may need to think about sharding your DB. Azure provide a set of tools that will help you do so automatically.
		* Predicable Performance - Because each database is allocated a fixed amount of resource, even if there is a database on the same server being hammered,
		that wont effect your database.
		* Business Continuity - Each database in Azure SQL is part of a cluster of replication nodes, one primary and 2 secondary. All transactions are not 
		considered successful until the data has been written to the primary and at least one of the secondary nodes. There is also the option to setup 
		geo-replication.
		* And from the developer point of view, there is no major difference between Azure SQL and SQL Server. So you can continue using your favourite tools.
	Now our server has been created lets have a quick looks at the portal. To see what has been created we will connect via SQL Management Studio. 
		(Enter details, click connect, get an error.)
	By Default Azure SQL denies all access to it. You have to add your IP address to a white list of allowed IPs, this includes the IPs of other Azure services.
	Now we are connected, you can see it looks like we are connect to any other instance of SQL Server.
	To show you this is just like working with a regular SQL Server lets create some tables, add some data and run a few queries.
	* Azure SQL vs SQL Server
		The Azure version of SQL is a cut down version of SQL Server. If you are thinking of using Azure SQL you should know it does not support,
			* Windows Authentication - The server is in the cloud not within your company network.
			* Distributed Transactions - Your cannot create linked servers, therefore you cannot commit transactions between them.
			* Database Mirroring - This feature of SQL Server is redundant due to the data replication nodes and the Geo-Replication that can be setup.
			* SQL Server Agent / Jobs - These are not supported on Azure SQL, but you can use the Azure Automation services to replace whatever jobs you were 
			running.
		Azure also does a few things differently,
			* All tables must have a clustered index
			* Idle connections are closed after 30mis
			* You can only connect to your SQL instance on port 1433
			
	* DocumentDB
		As well as Azure SQL Azure provide a range of other data storage technologies such as My SQL or Postgres in the relational family. Redis and Riak in the Key/Value family.
		For graph databases there is Neo4j and in the Document database space there is Mongo, RethinkDb and Azure DocumentDB.
		
		Azure DocumentDB is Microsoft's offering in the feild of NoSQL JSON document databases.	DocumentDB is a fully managed document database as a service and designed to keep 
		pace with modern rapidly evolving applications. DocumentDB nativly supports JSON and executes Javascript within it database engine. Meaning you can write and execute 
		stored procedures and user defined functions directly on the database. DocumentDB automatically indexes all JSON documents, then allows you to query them with the 
		familier SQL syntax. A well as JavaScript Azure also provide SDKs in .Net, Java, Python and more, so you up and running quickly with the tools and languages you are already
		familier with.
	* DocumentDB Portal Demo
		* Show how to add a new DocumentDB, but don't (it takes a while).
		* Locate the already created service.
		* Add a users table
		* Add a few documents { Rich Tasker, Matt Ross, Richard Garside }
		* Execute a few queries
* Azure Storage
	Is another managed service that provides durable, scalable and redundant storage. Every Azure subscription get 500TB of storage which can be used across its
	three services.
		* Blob Storage
		* Table Storage
		* And Queues
	* Blob Storage
		Blob is an acronym for Binary Large OBject, which are files. They can be anything from images to database backups. Due to the nature of the 
		cloud you don't know which server your request has been sent to. So you should avoid saving files to the servers file system. 
		Blob storage gives you the ability to store and access files from anywhere in the world. You can interact with blob storage via its REST API or via any of the
		client libraries provided. You can also give read only access by sharing a URL to the blob.
		
		You will need a storage account before you can access blob storage. Once you have one then you can start adding containers. Containers can be thought of like
		folders on you file system. A storage account can have an unlimited number of container and a container can have an unlimited number of files, up to the 
		storage account limit of 500TB.
		
		Blob storage only allows for a single level of containers, therefore you cannot have containers within containers. But blob storage does try to simulate a 
		hierarchical file system by pre-pending what would be folder names and slashes to beginning of the file name.
		In the following examples, "cars" is the container name and everything after is the blob name. Depending on the blob storage viewer you use you will see a 
		folder structure or just a list of blobs in the container.
	* Table Storage
		Table storage is a schema-less NoSQL data store, that is scalable, redundant and fast. It is fast because every table has a clustered index which is used to 
		query the data. The index consists of a Partition Key and a Row Key and together they make a unique ID. The Partition Key is used to shard the data between
		different nodes in the storage cluster, records with the same partition key are stored on the same node and the row key is used for uniqueness within the
		partition. The tables also have timestamp column which updates when the record is updated. The timestamp column is also used as an E-Tag to maintain data 
		integrity. 
		
		As well as the the 3 system properties each table entity can have up to 252 additional properties which are key / values. Because table storage is scheme
		less not every record needs all the properties. In this example table storage is being used as a log. The first record is only logging the fact a clean up job 
		had completed. The second has logged an exception, with a stack trace for someone to review later.
		
		When designing your tables your really need to think about how to partition your data to get the maximum performance benefits.
		In this example I have a collection of users indexed by email. The domain part and the local part of the email address has been used as the partition and row 
		keys. When I search for a user by email I will split the email on the @ symbol and only search for the user within the relevent partition. Because you are querying
		on a subset of the data this is lighting quick. Troy Hunt has written a really good blog post about how he setup table storage for his Have I been Pwnd site. In it
		he say that he had to put a 400ms delay into his code because table storage was returning too quickly and the UX didn't feel real. 
		http://www.troyhunt.com/2013/12/working-with-154-million-records-on.html
	* Queues
		The Azure Queues is a simple service for storing and retreving messages. Each message a max limit of 64KB in size but you can have as many messages as you want 
		in as many queues as you want up to the 500GB limit. Azure does provide another queue service ServiceBus. This is a more advanced queue which follows the AMQP
		standard and has features such as sessions, topics, transactions, duplicate detection, automatic dead-lettering, and publish/subscribe capabilities. If you are
		interacting with external systems using the AMQP or just want to use some of these features then Service Bus might be for you. But if you are not conserned with
		that and you just want a simple way to communicate with the different parts of your app then Azure Queues would be the better choice. 
		For more info see, https://azure.microsoft.com/en-gb/documentation/articles/service-bus-azure-and-service-bus-queues-compared-contrasted/
		
		What would you use queues for? A good example is a website that allows users to upload images. But the site needs to create a thumbnail for each image. The thumbnail
		generation will take a long time to complete. You wouldn't want to hold the user up while that process is happening. So uploading the image to blob storage and putting
		the image blob url in a message on a queue so the image can be processed outside of the webapp. Doing this stops the having to wait for the image to be processed 
		before continuing. But also return the request thread to the thread pool freeing it up to handle the next request. Which is one of the first steps to make your site
		scaleable.
	* Limitations of Azure Storage (as of 15/07/2015)  https://azure.microsoft.com/en-gb/documentation/articles/azure-subscription-service-limits/
		 * Storage Accounts per subscription = 20
		 * TB per Storage Account = 500TB
		 * Max File Share size (this could be a folder of multiple files) = 5TB
		 * Total Request Rate / Storage Account / Sec = 20,000
		 * Throughput on a single Blob = 60MB / Sec or 500 requests / sec
		 * Throughput on a single queue = 2000 messages / sec
		 * Throughput on a single Table Partition = 2000 entities / sec
		 * Max Ingress / Storage Account (US) = 10Gbps (GRS), 20Gbps (LRS)
		 * Max Egress / Storage Account (US) = 20Gbps (GRS), 30Gbps (LRS)
		 * Max Ingress / Storage Account (EU & ASIA) = 5Gbps (GRS), 10Gbps (LRS)
		 * Max Egress / Storage Account (EU & ASIA) = 10Gbps (GRS), 15Gbps (LRS)
	* Storage Demo
		* Setup a storage account
		* Code sample - Image Upload and Processing, this demo will show you how to upload an image to blob storage, write a record to table storeage, write a message to a
			queue. Read a message off a queue and update a record in table storage.
* Cloud Services
	* About
		In Microsofts infinate wisdom they have given the same name to two different Azure services.
			* One is a management tool for VM clusters. Which provides features like load balencing between the clustered VM nodes and maintaining the availbility of the nodes.
			* The other is made up of managed VMs called Web Roles and Worker Roles.
			* Cloub Services is an example of one of the Platform-as-a-Service technologies available on Azure.
				* It is a managed service so you do have to worry about patching and maintaining the VM.
				* Although you can RDP to the VM for extra configuration options.
				* Cloud Services are perfectly suited for application that need to scale reliably with low administration needs.
				* Azure provide SDKs for a multitude of languges.
					* .Net
					* Java
					* PHP
					* Python
					* Node.js
					* and more
				* Both the Web and Worker roles have an Entry Point class which methods that are called by the Cloud Service at specific points in the roles lifetime.
					* OnStart - Any setup codes goes here, and has to return true or the role will recycle and try again.
					* Run - This is where the main roles code is called from, this should be a infinate loop. If this method throws an exception the role will be recycled.
					* OnStop - Any tear down code goes in here. So if you need to clear queues or need write to logs before the roles is stopped.
			* Web Roles
				* Run on top of IIS, so you can host ASP.Net Websites and Web APIs, WCF Services or any other technology that can be ran on IIS.
				* You can have multiple application endpoints in one Web Role instance. For example, you could expose your app via a HTML interface, a REST API or a WCF service.
				* The Azure Cloud Service calls the OnStart event before the it starts the main web application. This means you can get the app into a ready state, like 
				prepopulating a cache or createing tables or queues.
			* Worker Roles
				* WorkerRoles don't run on IIS. They can be considered as Windows services that execute background tasks but in the cloud.
				* Worker Roles are hosted in thier own VMs. So any heavy lifting the Worker Roles does wont impact on the performance of other resourses. Unlike WebJobs but 
				I will come on to that later.
			* The Web / Worker Role patern is a common architectual design pattern within the Azure Cloud Services, common scenarios for this pattern is to have the Web Role handel
			any HTTP requests comming in to the app. Then for the Web Role to pass any intensive work off to the Worker Role usually via a queue.
			image Url - https://acomdpsstorage.blob.core.windows.net/dpsmedia-prod/azure.microsoft.com/en-us/documentation/articles/fundamentals-introduction-to-azure/20150720070853/cloudservicesintronew.png
	* Demo
	* Web Apps vs Web Roles
		By now, if I am doing the whole presenting thing right, you should know a bit about WebApps and Web Roles in Azure. You can probably see the similarities, but are 
		asking yourself what are the differences? Or, When would I use one over the other? 
		* WebApps
			The Azure WebApps service is very similar to any other hosting company. You can deploy files using FTP, or use git to instantly update the files on commit. Azure
			WebApps provide templates and frameworks via the Marketplace. All the familiarities you have with traditional webhosting is here in Azure WebApps.
			
		* Web Roles
			Web Roles is where the magic happens. A Web Role is a cloud service, when using cloud services you are getting the full PaaS experience.
			Web Roles give you more control over the environment,  unlike traditional hosting and WebApps you can RDP on to the servers and get direct access to IIS, if you 
			are running Windows. But you don't have to worry about paching and maintaing the server the Azure team takes care of it.
			
			WebRoles get two staging slots by default, in WebApps you only get the one but you can add more manually. When you setup a new Web Role a Staging and Production 
			environment is created for you. These environments are identical, this mean you no longer havethe worry of your code working in the staging/test environment and 
			crashiong in production.
			
			There a higher level of CDN intergeation, it requires a little configuration but because you have more control it can be done. 
			The same goes for scripts that require elevated privleges, if you are thinking about migrasting a legacy system to Azure then you are able to run those scripts with a
			Web Role.
			
			Lastly scaling works differently in Web Roles. With a WebApp you scale out the number of VMs running. In Web Roles you can still just increase the number of VMs you have,
			but you can also increase the number of Web Role instances are running in the VM.
			
	* Web Jobs vs Worker Roles
		I have told you that any heavy lifting or any background task should be done with a worker role rather than you app and that still holds true. But let me introduce you to the
		worker roles little brother the WebJob. WebJobs allow you to run programs or scripts in your WebApp service. You can run a WebJob either on demand or continuously. 
		
		WebJobs run along side you WebApp and uses the same resources, hence why I say its the worker roles little brother as you will still want to do any intensive work with 
		a worker role because they wont effect the performance of the web app.
		
		Webjobs can be as simple as Console.Writeline("Hello world") or you can use the Azure WebJobs SDK to pull in cool features such as triggering a job when a file is uploaded to a 
		blob storage container or when a message is put on a queue.
		
		So if the Web and Worker role architecture is too much for your small WebApp then WebJobs is one of the many services available and waiting for you on Azure.
* Summary
	I have spoken about
		* The differences and pit-falls of on-premise and cloud computing.
		* I have shown you the Azure Portals and told you what services are available with Azure 
		* I started to focus on WebApps and how to create, Deploy and configure your WebApp.
		* Then we looked at the different data storage options such as 
			* Azure SQL, where I showed you how to create and connect to a Azure SQL intance.
			* We had a look at the DocumentDB service
		* Next we looked at the Azure Storage service, where I showed you some of the features of
			* blob storage
			* table storage
			* Azure queues
		I also breifly spoke about the ServiceBus service. Then finished that section off with a little code demo.
		* Finally I talked about Cloud Services which are made up of Web Roles and Worker Roles. I then converted
		the earlier Storage Demo to use a worker role to resize the image.
		* I finished the section and the talk off with a comparison between WebApp and Web roles. And Worker Roles and WebJobs.
* Thank you
	Hopefully I have given you a bit more knowledge about what is available on Azure and a head start when you go out and 
	research what technologies you can use in Azure around WebApps.  